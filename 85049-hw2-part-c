Name:Ramasubbulakshmi periasmay
Id :85049
Assignment2 : part c


Part C.
You should write your homework in a file called hw2.txt. Submit your homework via git as described in the last question. Put your git link in the homework.

Create a new git repository somewhere in your filesystem, and configure a remote (called whatever you want, 

   Subbus-MacBook-Pro:desktop Rasumi$ cd Assgn2-part-c
Subbus-MacBook-Pro:Assgn2-part-c Rasumi$ git init
Initialized empty Git repository in /Users/Rasumi/Desktop/Assgn2-part-c/.git/


----------------------------------------------------------------------------------------------------------------------------------------------------------------
What command did you use to configure the remote?

Subbus-MacBook-Pro:Assgn2-part-c Rasumi$ git remote add origin https://github.com/Subbulakshmi-P/hw2-partc.git
Subbus-MacBook-Pro:Assgn2-part-c Rasumi$ git remote -v
origin	https://github.com/Subbulakshmi-P/hw2-partc.git (fetch)
origin	https://github.com/Subbulakshmi-P/hw2-partc.git (push)

A remote in git is basically a bookmark  for a different repository from which you may wish to pull or push code.
Git remote –v 
To see which remote servers you have configured. If you have more than one remote, the command lists them all.







Instead of creating a new git repository and configuring it with this remote, I could have asked you to git clone the repo from afs. If you had done so, what would the output of git remote -v be?


Subbus-MacBook-Pro:~ Rasumi$ git clone https://github.com/Subbulakshmi-P/hw2-partc.git
Subbus-MacBook-Pro:~ Rasumi$ git remote -v

Git remote –v ----   Nothing will be displayed here. Which means we haven’t configured anything with remote.

git fetch origin ----   Fatal: 'origin/master' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.


Run git fetch remotename (substituting your remote name for remotename).Did anything appear in your working directory? Why?

Answer:   First, check that your origin is set by running  -- git remote –v.
This should show you all of the push / fetch remotes for the project.
If this returns with no output mean , You haven,t set up ur origin yet.

ou can then add in the proper remote using
$git remote add origin https://github.com/Subbulakshmi-P/Test.git


then git fetch


Subbus-MacBook-Pro:extra Rasumi$ git fetch 
remote: Counting objects: 6, done.
remote: Total 6 (delta 0), reused 0 (delta 0), pack-reused 6
Unpacking objects: 100% (6/6), done.
From https://github.com/Subbulakshmi-P/Test
 * [new branch]      master     -> origin/master
 

---------------------------------------------------------------------------------------------------------if you want to fetch all the information that are in remote  has but that you don’t yet have in your repository, you can run git fetch remotename:

he command goes out to that remote project and pulls down all the data from that remote project that you don’t have yet. After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.
 If you clone a repository, the command automatically adds that remote repository under the name “origin”. So, git fetch origin fetches any new work that has been pushed to that server since you cloned (or last fetched from) it. It’s important to note that the git fetch command only downloads the data to your local repository – it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.


Examples
In addition to origin, it’s often convenient to have a connection to your teammates’ repositories. For example, if your co-worker, John, maintained a publicly accessible repository on dev.example.com/john.git, you could add a connection as follows:
git remote add john http://dev.example.com/john.git
Having this kind of access to individual developers’ repositories makes it possible to collaborate outside of the central repository. This can be very useful for small teams working on a large project.
git fetch
The git fetch command imports commits from a remote repository into your local repo. The resulting commits are stored as remote branches instead of the normal local branches that we’ve been working with. This gives you a chance to review changes before integrating them into your copy of the project.
Usage
git fetch <remote>
Fetch all of the branches from the repository. This also downloads all of the required commits and files from the other repository.
git fetch <remote> <branch>
Same as the above command, but only fetch the specified branch.
Discussion
Fetching is what you do when you want to see what everybody else has been working on. Since fetched content is represented as a remote branch, it has absolutely no effect on your local development work. This makes fetching a safe way to review commits before integrating them with your local repository. It’s similar to svn update in that it lets you see how the central history has progressed, but it doesn’t force you to actually merge the changes into your repository.
Remote Branches




Update your local master branch with the remote one, and give the command you used to do so.

Answer:  

first we need to checkout our local branch master. Then git pull origin my_remote_branch .


Subbus-MacBook-Pro:Assgn2-part-c Rasumi$ git status
On branch master

Subbus-MacBook-Pro:Assgn2-part-c Rasumi$ git pull origin master
From https://github.com/Subbulakshmi-P/hw2-partc
 * branch            master     -> FETCH_HEAD









Your working directory should have been updated. You should check that. That means the master branch was updated on the remote. But it's possible that when we ran git fetch, we fetched other branches as well! How could we (i.e. what command could we use) find all the branches we may have gotten from the remote?


Subbus-MacBook-Pro:Assgn2-part-c Rasumi$ git status
On branch master
nothing to commit, working directory clean

git diff  - it shows the difference between local branch with remote.. it displayed nothing which means working directory has been updated.
Or 

Git fetch






What is a bare repository? What makes it different from normal repositories? In what situations is it used?

repositories created with git init --bare are called bare repos. They are structured a bit differently from working directories. First off, they contain no working or checked out copy of your source files. And second, bare repos store git revision history of your repo in the root folder of your repository instead of in a .git subfolder. Note… bare repositories are customarily given a .git extension.

Why use ?
Well, a working repository created with git init is for… working. It is where you will actually edit, add and delete files and git commit to save your changes. If you are starting a project in a folder on your dev machine where you will add, edit and delete files of your project, use “git init”. Note: if you git clone a repository you will be given a working repository with the .git folder and copies of the working files for editing.
A bare repository created with git init --bare is for… sharing. If you are collaborating with a team of developers, and need a place to share changes to a repo, then you will want to create a bare repository in centralized place where all users can push their changes (often the easy choice is github.com). Because git is a distributed version control system, no one will directly edit files in the shared centralized repository. Instead developers will clone the shared bare repo, make changes locally in their working copies of the repo, then push back to the shared bare repo to make their changes available to other users.
Because no one ever makes edits directly to files in the shared bare repo, a working tree is not needed. In fact the working tree would just get in way and cause conflicts as users push code to the repository. This is why bare repositories exist and have no working tree.





In lecture, I was careful to explain the two-step procedure of using git fetch and git merge remotename/branchname to get commits from a remote. When would this be a good idea as opposed to simply doing git pull remotename branchname? Briefly discuss remote-tracking branches and their relevance in your answer.

Answer:

In the simplest terms, git pull does a git fetch followed by a git merge. You can do a git fetch at any time to update your remote-tracking branches under refs/remotes/<remote>/. This operation never changes any of your own local branches under refs/heads, and is safe to do without changing your working copy.

A git pull is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.

•	When you use pull, Git tries to automatically do your work for you. It is context sensitive, so Git will merge any pulled commits into the branch you are currently working in. pull  automatically merges the commits without letting you review them first. If you don’t closely manage your branches, you may run into frequent conflicts.
•	When you fetch, Git gathers any commits from the target branch that do not exist in your current branch and stores them in your local repository. However, it does not merge them with your current branch. This is particularly useful if you need to keep your repository up to date, but are working on something that might break if you update your files. To integrate the commits into your master branch, you use merge.
•	One use case of git fetch is that the following will tell you any changes in the remote branch since your last pull... so you can check before doing an actual pull, which could change files in your current branch and working copy.
•	git fetch git diff ...origin 
•	


Don’t use git pull, use git fetch and then git merge.
------------------------------------------------------------------------------------------------------------------------------------------



I didn't ask you to do this, but suppose I asked you to make a commit on the 'other' branch. If I wanted you to push this branch, what command would you use?

    git push --set-upstream origin master





